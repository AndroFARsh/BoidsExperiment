#include "./Utils/Quaternion.compute"
#include "./Utils/Math.compute"

#pragma kernel CSBoidMove

uint boidsNumber;
struct Boid
{
  float4 rotation;
  float3 position;
  float  speed;
};

ConsumeStructuredBuffer<uint>   g_consume;
AppendStructuredBuffer<Boid>    g_boidOut;
StructuredBuffer<Boid>          g_boidIn;

float4 g_params0;
float4 g_params1;
float4 g_params2;

#define GOAL              (g_params0.xyz)
#define DELTA_TIME        (g_params0.w)

#define MIN_DISTANCE      (g_params1.x)
#define MAX_DISTANCE      (g_params1.y)
#define MIN_SPEED         (g_params1.z)
#define MAX_SPEED         (g_params1.w)

#define CENTER_FACTOR     (g_params2.x)
#define AVOID_FACTOR      (g_params2.y)
#define DIRECTION_FACTOR  (g_params2.z)

[numthreads(10, 1, 1)] 
void CSBoidMove(uint3 id : SV_DispatchThreadID) 
{
	// We don't need this consume buffer but you can see how you could have a list of ALIVE boids
    uint bid = g_consume.Consume();  
    if (bid >= boidsNumber) return;
    
    Boid b = g_boidIn[bid];

    //-------------- COMPARE AGAINST OTHERS
    float3 centerSum = (float3)0;
    float3 avoidSum  = (float3)0;
    float  speedSum  = (float)0;

    uint count = 0;
    // For every boid in the system, check if it's too close
    for (uint i = 0; i < boidsNumber; ++i)
    {
        if (bid == i) continue;

        Boid nextB = g_boidIn[i];

        // Distance
        float3 diff = b.position - nextB.position;
        float  distance = length(diff);
        if (distance > MAX_DISTANCE) continue;
        
        centerSum += nextB.position;
        speedSum += nextB.speed;
        
        if (distance > 0 && distance < MIN_DISTANCE) 
            avoidSum += (normalizedVector(diff) / distance);
        
        count++;
    }
    
    float3 dir    = normalizedVector(GOAL - b.position);
    float3 center = (float3)0;
    float3 avoid  = (float3)0;
    float  speed  = b.speed;
    if (count > 0) {
        dir *= DIRECTION_FACTOR;
        center = normalizedVector(centerSum / count - b.position) * CENTER_FACTOR;
        avoid = normalizedVector(avoidSum / count) * AVOID_FACTOR;
        speed = speedSum / count;
    }
    
    if (speed > MAX_SPEED) speed = MAX_SPEED;
    
    float4 rotation = slerp(b.rotation, lookRotation(dir + center + avoid), DELTA_TIME * speed);
    
    //-------------- UPDATE BOID DATA
    b.rotation  = rotation;
    b.position += (rotate(rotation, float3(0.0, 0.0, 1.0)) * DELTA_TIME * speed);
    b.speed     = speed; 
    
    //-------------- OUTPUT RESULT
    g_boidOut.Append(b);
}
