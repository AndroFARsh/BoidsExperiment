#ifndef     __Quaternion__
#define     __Quaternion__

float3 rotate(float4 rotation, float3 v)
{
    float num0 = rotation.x * 2.0;
    float num2 = rotation.y * 2.0;
    float num3 = rotation.z * 2.0;
    float num4 = rotation.x * num0;
    float num5 = rotation.y * num2;
    float num6 = rotation.z * num3;
    float num7 = rotation.x * num2;
    float num8 = rotation.x * num3;
    float num9 = rotation.y * num3;
    float num10 = rotation.w * num0;
    float num11 = rotation.w * num2;
    float num12 = rotation.w * num3;
    
    float3 result;
    result.x = (1.0 - (num5 + num6)) * v.x + 
               (num7 - num12) * v.y + 
               (num8 + num11) * v.z;
    
    result.y = (num7 + num12) * v.x + 
               (1.0 - (num4 + num6)) * v.y + 
               (num9 - num10) * v.z;
    
    result.z = (num8 - num11) * v.x + 
               (num9 + num10) * v.y + 
               (1.0 - (num4 + num5)) * v.z;
    return result;
}

float4 lookRotation(float3 fwdV, float3 upV)
{
        float3 forward = fwdV;
		float3 right = cross(upV, forward);
		float3 up = cross(forward, right);
		
		#define m00  (right.x)
		#define m01  (right.y)
		#define m02  (right.z)
		
		#define m10  (up.x)
		#define m11  (up.y)
		#define m12  (up.z)
		
		#define m20 (forward.x)
		#define m21 (forward.y)
		#define m22 (forward.z)

		float num8 = (m00 + m11) + m22;
		float4 quaternion = (float4)0;
		if (num8 > 0.0)
		{
			float num = sqrt(num8 + 1);
			quaternion.w = num * 0.5;
			num = 0.5 / num;
			quaternion.x = (m12 - m21) * num;
			quaternion.y = (m20 - m02) * num;
			quaternion.z = (m01 - m10) * num;
			return quaternion;
		}
		if ((m00 >= m11) && (m00 >= m22))
		{
			float num7 = sqrt(((1 + m00) - m11) - m22);
			float num4 = 0.5 / num7;
			quaternion.x = 0.5 * num7;
			quaternion.y = (m01 + m10) * num4;
			quaternion.z = (m02 + m20) * num4;
			quaternion.w = (m12 - m21) * num4;
			return quaternion;
		}
		if (m11 > m22)
		{
			float num6 = sqrt(((1 + m11) - m00) - m22);
			float num3 = 0.5 / num6;
			quaternion.x = (m10 + m01) * num3;
			quaternion.y = 0.5 * num6;
			quaternion.z = (m21 + m12) * num3;
			quaternion.w = (m20 - m02) * num3;
			return quaternion;
		}
		float num5 = sqrt(((1 + m22) - m00) - m11);
		float num2 = 0.5 / num5;
		quaternion.x = (m20 + m02) * num2;
		quaternion.y = (m21 + m12) * num2;
		quaternion.z = 0.5 * num5;
		quaternion.w = (m01 - m10) * num2;
		return quaternion;
}

float4 lookRotation(float3 fwd)
{
    return lookRotation(fwd, float3(0.0, 1.0, 0.0));
}

float4 slerp(float4 q1, float4 q2, float t) 
{
    float d = dot(q1.xyz, q2.xyz) + q1.w * q2.w;
    
	/*	
        dot = cos(theta)
        if (dot < 0), q1 and q2 are more than 90 degrees apart,
        so we can invert one to reduce spinning	
	*/
	if (d < 0)
	{
	    d = -d;
		q2 = -q2;
	}
	
	if (d < 0.95f)
	{
	    float angle = acos(d);
		return (q1*sin(angle*(1-t)) + q2 * sin(angle*t))/sin(angle);
	} 
	
	// if the angle is small, use linear interpolation								
    return lerp(q1,q2,t);		
}

#endif